
from yacs.config import CfgNode as CN
 
_C = CN()
_C.SEED = 1234
_C.DESCRIPTION = ""

_C.SYSTEM = CN()
_C.SYSTEM.GPU_IDS = (3,)
_C.SYSTEM.NUM_GPUS = 1
_C.SYSTEM.NUM_WORKERS = 4

_C.MODEL = CN()
_C.MODEL.MODEL_NAME = 'dncnn'
_C.MODEL.MODULE_NAME = 'basic'
_C.MODEL.NUM_ITER = 17
_C.MODEL.IN_CHANNELS = 1
_C.MODEL.OUT_CHANNELS = 1
_C.MODEL.NUM_FEATURES = 64
_C.MODEL.KERNEL_SIZE = 3
_C.MODEL.RESIDUAL = True
_C.MODEL.BN = True
_C.MODEL.ACT = True
_C.MODEL.BIAS = True
_C.MODEL.GROUPS = 1
_C.MODEL.TRAIN = True
_C.MODEL.ATTENTION = 'INVOLUTION'

_C.DATASET = CN()

_C.DATASET.TRAIN = CN()
_C.DATASET.TRAIN.TASK = 'denoise'
_C.DATASET.TRAIN.ROOT = ''
_C.DATASET.TRAIN.NOISE_LEVEL = 0.
_C.DATASET.TRAIN.BLIND = False
_C.DATASET.TRAIN.NOISE2NOISE = False
_C.DATASET.TRAIN.AUGMENT = True
_C.DATASET.TRAIN.PATCH_SIZE = 40
_C.DATASET.TRAIN.REPEAT = 64
_C.DATASET.TRAIN.BATCH_SIZE = 16
_C.DATASET.TRAIN.SAMPLE_RATE = 1.
_C.DATASET.TRAIN.MASK_PATH = ''
_C.DATASET.TRAIN.ABS = False
_C.DATASET.TRAIN.SEED = 1234
_C.DATASET.TRAIN.SAVE_TO_MEMORY = False

_C.DATASET.VAL = CN()
_C.DATASET.VAL.TASK = 'denoise'
_C.DATASET.VAL.ROOT = ''
_C.DATASET.VAL.NOISE_LEVEL = 0.
_C.DATASET.VAL.PATCH_SIZE = -1
_C.DATASET.VAL.REPEAT = 1
_C.DATASET.VAL.NOISE2NOISE = False
_C.DATASET.VAL.BATCH_SIZE = 1
_C.DATASET.VAL.SAMPLE_RATE = 1.
_C.DATASET.VAL.MASK_PATH = ''
_C.DATASET.VAL.ABS = False
_C.DATASET.VAL.SEED = 1234
_C.DATASET.VAL.SAVE_TO_MEMORY = False

_C.TEST = CN()
_C.TEST.TASK = 'denoise'
_C.TEST.ROOT = ''
_C.TEST.NOISE_LEVEL = 25.
_C.TEST.SAMPLE_RATE = 1.
_C.TEST.WEIGHT_PATH = ''
_C.TEST.OUT_DIR = ''
_C.TEST.MASK_PATH = ''
_C.TEST.ABS = False
_C.TEST.SEED = 1234
_C.TEST.REPEAT = 1
_C.TEST.REPEAT = 1
_C.TEST.REPEAT = 1
_C.TEST.SAVE_TO_MEMORY = False
_C.TEST.PATCH_SIZE = -1
_C.TEST.BATCH_SIZE = 1

_C.TRAIN = CN()
_C.TRAIN.RESUME = False
_C.TRAIN.RESUME_CHP_DIR = ''
_C.TRAIN.NUM_EPOCHS = 60
_C.TRAIN.LOSS_TYPES = "l2mean"
_C.TRAIN.LOSS_WEIGHTS = [1]
_C.TRAIN.OUT_DIR = './experiment/trained_models/dncnn'
_C.TRAIN.PARALLE = False
_C.TRAIN.SHOW_MIDDLE_RESULTS = True

_C.SOLVER = CN()
_C.SOLVER.MILESTONE = 30
_C.SOLVER.LEARNING_RATE = 1e-3
_C.SOLVER.LEARNING_RATE_DECAY = 0.1
_C.SOLVER.GRADIENT_CLIP = 0.5
_C.SOLVER.OPTIMIZER = 'ADAM'

def get_cfg_defaults():
  """Get a yacs CfgNode object with default values."""
  return _C.clone()